// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//pressure
RWStructuredBuffer<float> smokeDensity;
RWStructuredBuffer<float> smokeDensityNew;

//temperature
RWStructuredBuffer<float> temperature;
RWStructuredBuffer<float> temperatureNew;

//smoke velocity
RWStructuredBuffer<float4> velocity;
RWStructuredBuffer<float4> velocityNew;

//intermediate velocity field
RWStructuredBuffer<float4> ccvelocity;

//smoke vorticity
RWStructuredBuffer<float4> vorticity;

//display property of smoke (radiance mean brigthness)
RWStructuredBuffer<float> smokeVoxelRadiance;
RWStructuredBuffer<float> smokeVoxelTransparency;

//domain size
int unitPerSide;
float tempAmbiant;
float pressureAtmos;


uint flatten(uint3 coord)
{
    return coord.x + unitPerSide * (coord.y + unitPerSide * coord.z);
}

uint flattenPlusOne(uint3 coord)
{
    return coord.x + (unitPerSide+1) * (coord.y + (unitPerSide+1) * coord.z);
}

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //init each buffer before the simulation
    smokeDensity[flatten(id)] = max(10.0 - distance(id, uint3(unitPerSide / 2, 0, unitPerSide / 2)), pressureAtmos); 
    temperature[flatten(id)] = tempAmbiant;
    velocity[flattenPlusOne(id)] = float4(0.0, 0.0, 0.0, 0.0);
    vorticity[flattenPlusOne(id)] = float4(0.0, 0.0, 0.0, 0.0);
}
