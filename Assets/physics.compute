// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.141592653589793
#define TWOPI 6.283185307179586
#define HALFPI 1.570796326794896
#define INV_SQRT_2 0.7071067811865476

RWStructuredBuffer<float> smokeDensity;
int unitPerSide;
float iTime;

float len2Inf(float2 v) {
    float2 d = abs(v);
    return max(d.x, d.y);
}

// cf. iq https://www.shadertoy.com/view/4sfGzS
float hash(float3 p)  // replace this by something better
{
    p = frac(p * 0.3183099 + .1);
    p *= 17.0;
    return frac(p.x * p.y * p.z * (p.x + p.y + p.z));
}

float noise(in float3 x)
{
    float3 i = floor(x);
    float3 f = frac(x);
    f = f * f * (3.0 - 2.0 * f);

    return lerp(lerp(lerp(hash(i + float3(0, 0, 0)),
        hash(i + float3(1, 0, 0)), f.x),
        lerp(hash(i + float3(0, 1, 0)),
            hash(i + float3(1, 1, 0)), f.x), f.y),
        lerp(lerp(hash(i + float3(0, 0, 1)),
            hash(i + float3(1, 0, 1)), f.x),
            lerp(hash(i + float3(0, 1, 1)),
                hash(i + float3(1, 1, 1)), f.x), f.y), f.z);
}

float fbm(float3 p) {
    p *= 0.6;
    float v = noise(p);

    p *= 0.3;
    v = lerp(v, noise(p), 0.7);

    p *= 0.3;
    v = lerp(v, noise(p), 0.7);

    return v;
}

float fDensity(float3 lmn, float t) {
    t += 32.0;

    // Current position adjusted to [-1,1]^3
    float3 uvw = (lmn - float3(63.5, 63.5, 63.5)) / 63.5;

    // Value used to offset the main density
    float d2 = fbm(float3(0.6, 0.3, 0.6) * lmn +
        float3(0.0, 8.0 * t, 0.0)
    );

    // Main density
    float d1 = fbm(0.3 * lmn +
        float3(0.0, 4.0 * t, 0.0) +
        5.0 * float3(cos(d2 * TWOPI), 2.0 * d2, sin(d2 * TWOPI))
    );
    d1 = pow(d1, lerp(4.0, 12.0, smoothstep(0.6, 1.0, len2Inf(uvw.xz))));

    // Tweak density curve
    float a = 0.02;
    float b = 0.08;
    return 0.02 + 0.2 * smoothstep(0.0, a, d1) + 0.5 * smoothstep(a, b, d1) + 0.18 * smoothstep(b, 1.0, d1);
}

uint flatten(uint3 coord)
{
    return coord.x + unitPerSide * (coord.y + unitPerSide * coord.z);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here! 
    smokeDensity[flatten(id)] = fDensity(float3(id), iTime);
}
