// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Commun/commun.cginc"

#define PI 3.141592653589793
#define TWOPI 6.283185307179586
#define HALFPI 1.570796326794896
#define INV_SQRT_2 0.7071067811865476

//temperature and density
//x and y are temperature and density
//z and w are new temperature and new density
RWStructuredBuffer<float4> TempAndDensity;

//smoke velocity
RWStructuredBuffer<float4> velocity;

RWStructuredBuffer<float4> velocityNew;

//area of simulation
int unitPerSide;
int unitSize;

//time
float iTime;
float iDeltaTime;

//constants
float tempAmbiant;
float buoyAlpha;
float buoyBeta;

//global value used per shader
int3 coord = int3(0, 0, 0);
int flat;
int flatPlusOne;

bool3 outofbound = bool3(false, false, false);

//trilinear interpolation based on float 4 structure but only use 1 dimention.
//b is the float 4 bufer
//p is the point where you want to sample and interpolate
//axe is the dimension you want to interpolate
//plusOne is to use the array length or the array length + 1
float interpolate(RWStructuredBuffer<float4> b, float3 p, int axe, int size)
{
    //get the starting point of the cube
    float3 p0 = floor(p);

    //get the lerping value
    float3 deltaP = p - p0;
    
    //get the 8 value in a cube
    float x1 = 0.0;
    float x2 = 0.0;
    float x3 = 0.0;
    float x4 = 0.0;
    float x5 = 0.0;
    float x6 = 0.0;
    float x7 = 0.0;
    float x8 = 0.0;

    x1 = b[flatten(int3(p0.x, p0.y, p0.z),size)][axe];
    x2 = b[flatten(int3(p0.x + 1, p0.y, p0.z), size)][axe];
    x3 = b[flatten(int3(p0.x, p0.y + 1, p0.z), size)][axe];
    x4 = b[flatten(int3(p0.x + 1, p0.y + 1, p0.z), size)][axe];
    x5 = b[flatten(int3(p0.x, p0.y, p0.z + 1), size)][axe];
    x6 = b[flatten(int3(p0.x + 1, p0.y, p0.z + 1), size)][axe];
    x7 = b[flatten(int3(p0.x, p0.y + 1, p0.z + 1), size)][axe];
    x8 = b[flatten(int3(p0.x + 1, p0.y + 1, p0.z + 1), size)][axe];

    //lerp between the x axe
    float x12 = lerp(x1, x2, deltaP.x);
    float x34 = lerp(x3, x4, deltaP.x);
    float x56 = lerp(x5, x6, deltaP.x);
    float x78 = lerp(x5, x6, deltaP.x);

    //lerp between the y axe
    float x1234 = lerp(x12, x34, deltaP.y);
    float x5678 = lerp(x56, x78, deltaP.y);

    //lerp between the z axe
    return lerp(x1234, x5678, deltaP.z);

}
//b is the buffer of the axe currently being use
// 
//axe is the axe being not the axe of averaging 
//(i.e if you're averaging on the X axe then axe should be the Y or Z axe
//
// averageAxe is the axe being averaged
// dim is the dimension use in the averaging
// we have to do that since the MAC grid is fully integrated into a float4 array buffer
float velocityAerage(RWStructuredBuffer<float4> b, int3 axe, int3 averageAxe,int dim,int size)
{
    float v = b[flatPlusOne][dim];
    v += b[flatten(coord - axe, size)][dim]; 
    v += b[flatten(coord + averageAxe - axe, size)][dim];
    v += b[flatten(coord + averageAxe, size)][dim];
    v /= 4;
    return v;
}

float3 advectVelocity(int size)
{
    float3 newVec = float3(0.0, 0.0, 0.0);

    float3 actualCoord = float3(coord);

    if (check(coord,size))
    {
        //advect vector X part
        float x = velocity[flatPlusOne].x;
        float y = velocityAerage(velocity, int3(0, 1, 0), int3(1, 0, 0),1,size);
        float z = velocityAerage(velocity, int3(0, 0, 1), int3(1, 0, 0),2,size);
        
        //interpolate Z part
        float3 OldCoord = actualCoord - iDeltaTime * float3(x, y, z);
        newVec.x = interpolate(velocity, OldCoord,0, size);

        //advect vector Y part
        x = velocityAerage(velocity, int3(1, 0, 0), int3(0, 1, 0),0,size);
        y = velocity[flatPlusOne].y;
        z = velocityAerage(velocity, int3(0, 0, 1), int3(0, 1, 0),2, size);
        
        //interpolate Y part
        OldCoord = actualCoord - iDeltaTime * float3(x, y, z);
        newVec.y = interpolate(velocity, OldCoord,1, size);

        //advect vector Z part
        x = velocityAerage(velocity, int3(1, 0, 0), int3(0, 0, 1),0, size);
        y = velocityAerage(velocity, int3(0, 1, 0), int3(0, 0, 1),1, size);
        z = velocity[flatPlusOne].z;

        //interpolate Z part
        OldCoord = actualCoord - iDeltaTime * float3(x, y, z);
        newVec.z = interpolate(velocity, OldCoord,2, size);
    }

    return newVec;
}

float2 advectTempAndDensity(int size)
{
    float newTemp = 0.0;
    float newDensity = 0.0;

    float3 actualCoord = float3(coord);

    if (check(coord, size))
    {
        float3 newVec = float3(0.0, 0.0, 0.0);

        newVec.x = velocity[flatten(int3(coord.x - 1, coord.y, coord.z), size+1)].x + velocity[flatten(int3(coord.x + 1, coord.y, coord.z), size+1)].x / 2;
        newVec.y = velocity[flatten(int3(coord.x, coord.y - 1, coord.z), size+1)].y + velocity[flatten(int3(coord.x, coord.y + 1, coord.z), size+1)].y / 2;
        newVec.z = velocity[flatten(int3(coord.x, coord.y, coord.z - 1), size+1)].z + velocity[flatten(int3(coord.x, coord.y, coord.z + 1), size+1)].z / 2;

        float3 oldCoord = actualCoord - iDeltaTime * newVec;

        if(check(oldCoord,size))
        {
            newTemp = interpolate(TempAndDensity, oldCoord, 0, size);
            newDensity = interpolate(TempAndDensity, oldCoord, 1, size);
        }
    }

    return float2(newTemp, newDensity);
}

float3 addExternalForces(int size)
{
	if (check(coord, size))
	{
		float boyancy = /*-buoyAlpha * pressure[flat] +*/ buoyBeta * (TempAndDensity[flat].x - tempAmbiant);

        //todo add vorticity confinement


		return iDeltaTime * float3(0.0, boyancy, 0.0);
	}

    return float3(0.0, 0.0, 0.0);
}

float3 updatePressure()
{

}


//float3 project()

[numthreads(4,4,4)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //global coord for the whole shader
    coord = int3(id);
    flat = flatten(coord, unitPerSide);
    flatPlusOne = flatten(coord, unitPerSide+1);

    //first step
    float3 newVel = advectVelocity(unitPerSide + 1);
    newVel += addExternalForces(unitPerSide);
    //project();

    //second part
    float2 tempAndDens = advectTempAndDensity(unitPerSide);



    if (check(coord, unitPerSide + 1))
        velocityNew[flatPlusOne] = float4(newVel, 1.0);

    if (check(coord, unitPerSide))
    {
        TempAndDensity[flat].z = tempAndDens.x; //temp
        TempAndDensity[flat].w = tempAndDens.y; //density
    }
}
